name: Release static binaries

on:
  push:
    branches: [ "main" ]

env:
  version: 0.0.1
  GH_TOKEN: ${{ github.token }}

jobs:
  build_artifacts:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target:
          - x86_64-linux-gnu
          - x86_64-windows-gnu
          - x86_64-macos-none
          - aarch64-linux-gnu
          - aarch64-windows-gnu
          - aarch64-macos-none
        build_type:
          - release
          - debug

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

      # Zig is the C compiler used by the build system
    - name: Setup Zig
      uses: mlugg/setup-zig@v1
      with:
        version: 0.13.0

      # Build system depends on Go
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

      # Build system tool
    - name: Install Clide
      run: go install github.com/TeddyRandby/clide@latest

    - name: Configure
      run: clide configure -b='${{ matrix.build_type }}' -t='${{ matrix.target }}'

    - name: Build
      run: clide build

    - name: Upload Binary Artifact
      uses: actions/upload-artifact@v4
      with:
        name: 'gab-${{ matrix.build_type }}-${{ matrix.target }}'
        path: 'build-${{ matrix.target }}/gab'

    - name: Collect modules
      run: cp build-${{ matrix.target }}/mod/* mod

    - name: Upload Module Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: 'gab-${{ matrix.build_type }}-${{ matrix.target }}-modules'
        path: mod

  run_tests:
    strategy:
      matrix:
        build_type:
          - release
        os: 
          - ubuntu-latest
          - windows-latest
          - macos-latest
        include:
          - os: ubuntu-latest
            target: x86_64-linux-gnu
            cmd: ./gab
          - os: windows-latest
            target: x86_64-windows-gnu
            cmd: .\gab
          - os: macos-latest
            target: x86_64-macos-none
            cmd: ./gab

    runs-on: ${{ matrix.os }}
    needs: build_artifacts

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Download Binary
        uses: actions/download-artifact@v4
        with:
          name: 'gab-${{ matrix.build_type }}-${{ matrix.target }}'

      - name: Download Modules
        uses: actions/download-artifact@v4
        with:
          name: gab-${{ matrix.build_type }}-${{ matrix.target }}-modules

      - name: Make the binary executable (*nix)
        if: ${{ contains(matrix.target, 'mac') || contains(matrix.target, 'linux') }}
        run: chmod +x gab

      - name: Make the binary executable (win)
        if: ${{ contains(matrix.target, 'windows') }}
        run: |
          move gab gab.exe
          where.exe "gab"
          Get-Command ".\gab"

      - name: Log for debugging purposes
        run: ls -R .

      - name: Run Hello World
        run: ${{ matrix.cmd }} exec "'hello world!' .println"

      - name: Run tests
        run: ${{ matrix.cmd }} run test

  create_release:
    runs-on: ubuntu-latest
    needs: run_tests

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Check for existing tag
        id: tag_check
        run: git ls-remote --tags | grep '${{ env.version }}' 

      # Create a release if we didn't find an existing tag
      - name: Create Release
        if: steps.tag_check.conclusion == 'failure'
        run:  gh release create -R '${{ github.repository }}' '${{ env.version }}' --generate-notes

  release_artifacts:
    runs-on: ubuntu-latest
    needs: create_release

    permissions: write-all

    strategy:
      matrix:
        target:
          - x86_64-linux-gnu
          - x86_64-windows-gnu
          - x86_64-macos-none
          - aarch64-linux-gnu
          - aarch64-windows-gnu
          - aarch64-macos-none
        build_type:
          - release
          - debug

    steps:
      # Download artifacts created by the build step
      - name: Download Binary
        uses: actions/download-artifact@v4
        with:
          name: 'gab-${{ matrix.build_type }}-${{ matrix.target }}'

      - name: Download Modules
        uses: actions/download-artifact@v4
        with:
          name: 'gab-${{ matrix.build_type }}-${{ matrix.target }}-modules'
          path: 'mod'

      - name: Create Module Archive
        run: tar -cvzf 'gab-${{ matrix.build_type }}-${{ matrix.target }}-modules' mod/*
      
      - name: Rename binary
        run: mv gab 'gab-${{ matrix.build_type }}-${{ matrix.target }}'

      - name: Attach binary to release
        run: gh release upload -R '${{ github.repository }}' '${{ env.version }}' 'gab-${{ matrix.build_type }}-${{ matrix.target }}' || exit 0

      - name: Attach modules to release
        run: gh release upload -R '${{ github.repository }}' '${{ env.version }}' 'gab-${{ matrix.build_type }}-${{ matrix.target }}-modules' || exit 0
