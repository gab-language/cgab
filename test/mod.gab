variables\new_variables\test: .def (t => do
  a = 2
  t.expect(a ==: 2)

  a = 3
  t.expect(a ==: 3)
end)

variables\mutltiple_variables\test: .def (t => do
  (a b) = (1 2)
  t.expect(a ==: 1)
  t.expect(b ==: 2)

  (a b) = (b a)
  t.expect(a ==: 2)
  t.expect(b ==: 1)
end)

variables\reassign_variables\test: .def (t => do
  (a b c d) = (1 2 3 4)
  t.expect(a ==: 1)
  t.expect(b ==: 2)
  t.expect(c ==: 3)
  t.expect(d ==: 4)

  (a c d e) = (5 6 7 8)
  t.expect(a ==: 5)
  t.expect(c ==: 6)
  t.expect(d ==: 7)
  t.expect(e ==: 8)
end)

variables\rest_assign_constant\test: .def (t => do
  (a b c*) = (1 2 3 4 5)

  t.expect(a ==: 1)
  t.expect(b ==: 2)
  t.expect(c.at 0 .unwrap, ==: 3)
  t.expect(c.at 1 .unwrap, ==: 4)
  t.expect(c.at 2 .unwrap, ==: 5)
end)

variables\rest_assign_middle\test: .def (t => do
  (a b*, c) = (1 2 3 4 5)

  t.expect(a ==: 1)
  t.expect(c ==: 5)
  t.expect(b.at 0 .unwrap, ==: 2)
  t.expect(b.at 1 .unwrap, ==: 3)
  t.expect(b.at 2 .unwrap, ==: 4)
end)

variables\assign_trimdown\test: .def (t => do
  one_through_five = _ => (1 2 3 4 5)

  (a b) = (one_through_five.(), 6)

  t.expect(a ==: 1)
  t.expect(b ==: 2)
end)

variables\assign_trimup\test: .def (t => do
  blk = _ => (2)

  (a b c d) = (1, blk.(), 3)

  t.expect(a ==: 1)
  t.expect(b ==: 2)
  t.expect(c ==: 3)
  t.expect(d ==: nil:)
end)

variables\assign_multiblk\test: .def (t => do
  one_two = () => (1 2)
  three_four = () => (3 4)

  (z a b c d e) = (0, one_two.(), three_four.(), 5)

  t.expect(z ==: 0)
  t.expect(a ==: 1)
  t.expect(b ==: 2)
  t.expect(c ==: 3)
  t.expect(d ==: 4)
  t.expect(e ==: 5)

  (z a b) = (0, one_two.(), three_four.(), 5)
  t.expect(z ==: 0)
  t.expect(a ==: 1)
  t.expect(b ==: 2)
end)

variables\rest_assign_runtime\test: .def (t => do
  one_through_five = _ => (1 2 3 4 5)

  (a*, b c) = one_through_five.()

  t.expect(b ==: 4)
  t.expect(c ==: 5)
  t.expect(a.at 0 .unwrap, ==: 1)
  t.expect(a.at 1 .unwrap, ==: 2)
  t.expect(a.at 2 .unwrap, ==: 3)
end)

variables\rest_assign_runtime_middle\test: .def (t => do
  one_through_five = _ => (1 2 3 4 5)

  (a*, b c) = (0, one_through_five.(), 6)

  t.expect(b ==: 5)
  t.expect(c ==: 6)
  t.expect(a.at 0 .unwrap, ==: 0)
  t.expect(a.at 1 .unwrap, ==: 1)
  t.expect(a.at 2 .unwrap, ==: 2)
  t.expect(a.at 3 .unwrap, ==: 3)
end)

variables\rest_assign_existing_variable\test: .def t => do
  one_through_five = _ => (1 2 3 4 5)

  b = 1

  (a b*, c) = one_through_five.()

  t.expect(a ==: 1)
  t.expect(c ==: 5)
  t.expect(b.at 0 .unwrap, ==: 2)
  t.expect(b.at 1 .unwrap, ==: 3)
  t.expect(b.at 2 .unwrap, ==: 4)
end

variables\rest_kw_assign\test:.def t => do
  (a b opts**) = (1, 2, config: 3)

  t.expect(a ==: 1)
  t.expect(b ==: 2)
  t.expect(opts.len, ==:, 1)
  t.expect(opts.config, ==:, 3)
end

variables\rest_kw_assign_middle\test:.def t => do
  (a opts**, b) = (1, config: 3, 2)

  t.expect(a ==: 1)
  t.expect(b ==: 2)
  t.expect(opts.len, ==:, 1)
  t.expect(opts.config, ==:, 3)
end

get_config = () => (config: 3)

variables\rest_kw_assign_middle_from_block\test:.def t => do
  (a opts**, b) = (1, get_config.(), 2)

  t.expect(a ==: 1)
  t.expect(b ==: 2)
  t.expect(opts.len, ==:, 1)
  t.expect(opts.config, ==:, 3)
end

variables\rest_kw_assign_middle_from_block\test:.def t => do
  (opts**, a, b) = (get_config.(), 1, 2)

  t.expect(a ==: 1)
  t.expect(b ==: 2)
  t.expect(opts.len, ==:, 1)
  t.expect(opts.config, ==:, 3)
end

variables\rest_kw_assign_middle_from_block\test:.def t => do
  (a, b, opts**) = ( 1, 2, get_config.())

  t.expect(a ==: 1)
  t.expect(b ==: 2)
  t.expect(opts.len, ==:, 1)
  t.expect(opts.config, ==:, 3)
end

numbers\equal_itself\test: .def t => do
  t.expect(5 ==: 5)
end

numbers\do_math\test: .def t => do
  t.expect(10 ==: 5 * 2)
  t.expect(1 ==: 10 % 3)
  t.expect(8 ==: 1 << 3)
end

numbers\compare\test: .def t => do
  t.expect(5 < 10 ==: true:)
  t.expect(10 > 5 ==: true:)
end

numbers\dynamic_do_math\test: .def t => do
  t.expect(+:.(1 2) ==: 3)
  t.expect(+:.(1 2 ignore_me:) ==: 3)
  t.expect(-:.(1 2) ==: -1)

  t.expect(<<:.(1 2) ==: 4)
  t.expect(>>:.(2 1) ==: 1)
  t.expect(>>:.(2 100) ==: 0)
  t.expect(<<:.(2 100) ==: 0)
end

numbers\shift\test: .def t => do
  t.expect(1 << 2 ==: 4)
  t.expect(8 >> 2 ==: 2)
end

numbers\shift_negative_amount\test: .def t => do
  t.expect(1 >> -2 ==: 4)
  t.expect(8 << -2 ==: 2)
end

numbers\shift_negative_integer\test: .def t => do
  #t.expect(-1 >> 1, ==:, 1 << 31)
  t.expect(-1 << 1 ==: -2)
  t.expect(-4 >> 1 << 1 ==: -4)
end

numbers\shift_intwidth\test: .def t => do
  #t.expect(-1 >> 1, ==:, 1 << 31)
  t.expect(1 << 52 x => x == 0!)
  t.expect(1 << 53 ==: 0)
end

numbers\test_corner_cases\test: .def t => do
  t.expect(0 / 0 is\nan:)
  t.expect(1 / 0 is\inf:)
end

strings\equal_itself\test: .def (t => do
  t.expect('hello' ==: 'hello')
end)

strings\concatenate\test: .def (t => do
  t.expect('hello world' ==: 'hello' + ' world')
end)

strings\dynamic_interpolate\test: .def (t => do
  t.expect(+:.('hi ' 'world') ==: 'hi world')
  t.expect(+:.('hi ' 'world' ignore_me:) ==: 'hi world')
end)

strings\append_messages\test: .def (t => do
  t.expect(+:.('hi ' world:) ==: 'hi world')
  t.expect(('hi ' + world:) ==:'hi world')
end)

strings\length\test: .def t => do
  t.expect("Hello!".len, ==: 6)
  t.expect("Hello world".len, ==: 11)
  t.expect("Hello ðŸ˜€!".len, ==: 8)
end

binaries\convert_from_strings\test: .def t => do
  bin = "abc".to\b
  t.expect(bin?, ==:, Binaries.t)
end

binaries\work_with_len\test: .def t => do
  bin = "Hello ðŸ˜€!".to\b
  t.expect(bin.len, ==: 11)
end

binaries\work_with_at\test: .def t => do
  bin = "abc".to\b

  t.expect(bin.at 0 .unwrap, ==:, 97)
  t.expect(bin.at 1 .unwrap, ==:, 98)
  t.expect(bin.at 2 .unwrap, ==:, 99)

  t.expect(bin.at -1 .unwrap, ==:, 99)
  t.expect(bin.at -2 .unwrap, ==:, 98)
  t.expect(bin.at -3 .unwrap, ==:, 97)

  t.expect(bin.at(0, 2).unwrap, ==:, 229)

  t.expect(bin.at 42, ==:, none:)
  t.expect(bin.at(1, 2), ==:, none:)

  bin = "Hello ðŸ˜€!".to\b

  t.expect(bin.at 5 .unwrap, ==: 32)
  t.expect(bin.at 6 .unwrap, ==: 240)
  t.expect(bin.at 10 .unwrap, ==: 33)
end

blocks\capture\test: .def (t => do
  capture_me = 1

  t.expect(capture_me ==: 1)

  test = _ => do
      t.expect(capture_me ==: 1)
      capture_me  
  end

  t.expect(test.() ==: 1)
end)

blocks\work_with_varargs\test: .def (t => do
  varfunc = (first args*) => do
    t.expect(first ==: 1)
    t.expect(args.at 0 .unwrap, ==: 2)
  end

  varfunc.(1 2)

  onetwo = _ => (1 2)

  varfunc.(onetwo.())

  varfunc = (first args*, last) => do
    t.expect(first ==: 1)
    t.expect(args.at 0 .unwrap, ==: 2)
    t.expect(last ==: 3)
  end

  varfunc.(1 2 3)

  onetwothree = _ => (1 2 3)

  varfunc.(onetwothree.())
end)

blocks\empty_varargs\test: .def (t => do
  varfunc = (first args*, other last) => do
    t.expect(first ==: 1)
    t.expect(args.len, ==: 0)
    t.expect(other ==: 2)
    t.expect(last ==: nil:)
  end

  varfunc.(1 2)

  onetwo = _ => (1 2)

  varfunc.(onetwo.())
end)

Point = { x: nil:, y: nil: }?

records\have_properties\test: .def (t => do
  point = {
    x: 1
    y: 2
  }

  t.expect(point.x, ==: 1)
  t.expect(point.y, ==: 2)
end)

records\structurally_type\test: .def (t => do
  pone = { x: 1 y: 2}
  ptwo = { x: 3 y: 4}

  t.expect(pone.?, ==: ptwo.?)
end)

records\work_for_all_keys\test: .def (t => do
  obj = {
      ({}?) 3
      hi: 4
  }

  t.expect(3 ==: obj.at({}?).unwrap)
  t.expect(4 ==: obj.at(hi:).unwrap)
end)

records\make_tuples\test: .def (t => do
  tup = [ 1 2 3 ]

  t.expect(tup.at 0 .unwrap, ==: 1)
  t.expect(tup.at 1 .unwrap, ==: 2)
  t.expect(tup.at 2 .unwrap, ==: 3)
end)

records\make_var_tuples\test: .def (t => do
  onetwothree = _ => (1 2 3)

  tup = [ onetwothree.() ]
  t.expect(tup.at 0 .unwrap, ==: 1)
  t.expect(tup.at 1 .unwrap, ==: 2)
  t.expect(tup.at 2 .unwrap, ==: 3)
  t.expect(tup.len, ==: 3)
end)

records\take_fields\test: .def (t => do
  rec = { a: 1 b: 2 c: 3 }

  (without_a, v) = rec .take a:

  t.expect((without_a ?) ==: { c: 1, b: 2 } ?)
  t.expect(without_a .at b: .unwrap, ==: 2)
  t.expect(without_a .at c: .unwrap, ==: 3)
  t.expect(v ==: 1)

  (without_b, v) = rec .take b:

  t.expect((without_b ?) ==: { a: 1, c: 2 } ?)
  t.expect(without_b .at a: .unwrap, ==: 1)
  t.expect(without_b .at c: .unwrap, ==: 3)
  t.expect(v ==: 2)
end)

records\big_take_fields\test: .def t => do
  list = [
    0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
    17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
    33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48
    49 50 51 52 53 54 55 56 57 58 59 60 61
  ]

  (popped, v) = list .take 61
  t.expect(popped.len, ==:, 61)

  t.expect(popped.len, ==:, 61)
  t.expect(v, ==:, 61)

  (popped, v) = list .take 10

  t.expect(popped.len, ==:, 61)
  t.expect(v, ==:, 10)

  (popped, v) = popped .take 42
  t.expect(popped.len, ==:, 60)
  t.expect(v, ==:, 42)
end

records\work_when_large\test: .def t => do
  list = Ranges.make(0 2048).collect

  t.expect(list.at 1024 .unwrap, ==:, 1024)
  t.expect(list.at 1999 .unwrap, ==:, 1999)
  t.expect(list.at 42 .unwrap, ==:, 42)
  t.expect(list.at 2049, ==:, none:)

  (popped, v) = list.take(2048)

  t.expect(popped.is\list, ==: true:)
  t.expect(v ==: 2048)

  (popped, v) = list.take(1234)
  t.expect(popped.is\list, ==: false:)
  t.expect(v ==: 1234)
end

records\work_with_duplicate_keys\test:.def t => do
# The middle a: should be ignored
  rec = { a: 2 a: 3 b: 4 }

  t.expect(rec.at a: .unwrap, ==: 2)
  t.expect(rec.at b: .unwrap, ==: 4)
end

shapes\list_keys\test:.def t => do
  shape = Shapes.make(a: b:)
  (a b) = shape*

  t.expect(a ==: a:)
  t.expect(b ==: b:)

  shape = Shapes.make(a: a: a: b:)
  (a b) = shape*

  t.expect(a ==: a:)
  t.expect(b ==: b:)
end

vec\t = { x: nil:, y: nil: }?

+: .def (vec\t other => {
  x: self.x + other.x
  y: self.y + other.y
})

==: .def(vec\t other => do
  (self.x == other.x) & (self.y == other.y)
end)

overloads\overload_operators\test: .def (t => do
  a = { x: 1 y: 2 }
  b = { x: 2 y: 1 }
  test = a + b

  t.expect(test.x, ==: 3)
  t.expect(test.y, ==: 3)
end)

overloads\overload_comparison\test: .def (t => do
  <: .def(vec\t other => do
    mag = ((self.x) * (self.x)) + ((self.y) * (self.y))
    other_mag = ((other.x) * (other.x)) + ((other.y) * (other.y))
    mag < other_mag
  end)

  a = { x: 1 y: 1 }
  b = { x: 1 y: 1 }
  t.expect(a ==: b)

  b = { x: 4 y: 4 }
  t.expect(a <: b)
end)

overloads\handle_changing_overloads\test: .def (t => do
  get = (obj key) => obj.at key

  t.expect(get.({ x: 1 y: 2 } x:).unwrap, ==: 1)

  at: .def (vec\t key => do
    v = self
    (key == 'mag') .then (_ => do
      ((v.x) * (v.x)) + ((v.y) * (v.y))
    end)
  end)

  t.expect(get.({ x: 2 y: 2 } 'mag') ==: 8)
end)

overloads\handle_switching_types\test: .def (t => do
  sum = (a b) => a + b

  a = { x: 3 y: 3 }
  b = { x: 1 y: 2 }
  c = { x: 2 y: 1 }

  t.expect(3 ==: sum.(1 2))
  t.expect(a ==: sum.(b c))
  t.expect('hi' ==: sum.('h' 'i'))
  t.expect('hi' ==: sum.('h' 'i'))
  t.expect(a ==: sum.(b c))
  t.expect(3 ==: sum.(1 2))
end)

test: .def do _ => self end

messages\send\test: .def (t => do
  t.expect(1 ==: 1.test)
end)

messages\cache\test: .def (t => do
  repeat = _ => (1.test)

  t.expect(repeat.() ==: 1)
  t.expect(repeat.() ==: 1)
  t.expect(repeat.() ==: 1)
end)

messages\use_more_specific_spec\test: .def (t => do
  test: .def ('gab\\number' _ => do
      self + 1
  end)

  t.expect(1.test, ==: 2)
end)

messages\send_receive_var\test: .def (t => do
  oneTwo = _ => (1 2)

  takeOneTwo = (a b) => do
    t.expect(1 ==: a)
    t.expect(2 ==: b)
  end

  takeOneTwo.(oneTwo.())
end)

messages\send_constants\test: .def (t => do
  hi: .def ('gab\\number' test:)

  t.expect(1.hi, ==: test:)
end)

messages\send_dynamically\test: .def (t => do
  sum = (a b) => do
    +:.(a b)
  end

  result = sum.(1 1)

  t.expect(result ==: 2)

  result = sum.(2 2)

  t.expect(result ==: 4)

  result = sum.('hi' ' world')

  t.expect(result ==: 'hi world')

  result = hi:.{ hi: 8 }

  t.expect(result ==: 8)

  result = put:.({ hi: 8 } hi:  2)

  t.expect(result.hi, ==: 2)

  result = *:.['hi']

  t.expect(result ==: 'hi')

  result = put:.({ hi: nil: } hi: 4)

  t.expect(result.hi, ==: 4)
end)

channels\basic\test: .def t => do
  ch = Channels.make

  fib = Fibers.make () => ch <! 'test'

  (ok v) = ch >!

  t.expect(ok ==: ok:)
  t.expect(v ==: 'test')

  ch.close

  ok = ch >!

  t.expect(ok ==: none:)
end

channels\handle_multiple_blocking_puts\test: .def t => do
  ch = Channels.make

  blocking_put = (v) => (Fibers.make () => ch <! v)

  blocking_put.(1)
  blocking_put.(2)
  blocking_put.(3)

  took_lessthan_four = () => t.expect(ch.>!.unwrap, <:, 4)

  took_lessthan_four.()
  took_lessthan_four.()
  took_lessthan_four.()
end

channels\handle_multiple_values\test: .def t => do
  ch = Channels.make

  Fibers.make () => ch <! (ok: 2)

  (ok, s, v) = ch >!
  t.expect(ok ==: ok:)
  t.expect(s ==: ok:)
  t.expect(v ==: 2)

  Fibers.make () => ch <! ([1 2 3]*)

  (ok, one, two, three) = ch >!
  t.expect(ok ==: ok:)
  t.expect(one ==: 1)
  t.expect(two ==: 2)
  t.expect(three ==: 3)
end

ui\should_open_and_close\test: .def t => do
  (ev app) = (Channels.make, Channels.make)

  ui = 'cgui'.use
  Fibers.make () => ui.run(ev app)

  ev.close
  app.close
end

io\should_make_working_tls_request\test: .def t => do
  (ok, sock) = IO.Sock.make tcp\tls:

  t.expect(ok ==: ok:)

  ok = sock.connect("www.google.com" 443)

  t.expect(ok ==: ok:)

  ok = sock.write('GET / HTTP/1.0\r\nHost:www.google.com\r\n\r\n'.to\b)

  t.expect(ok ==: ok:)

  (ok, bin) = sock.read(1024)

  t.expect(ok ==: ok:)

  (ok, str) = bin.as\s

  t.expect(ok ==: ok:)
end

'tests'.use.()
