ui = 'cgui'.use

(events, app) = (Channels.make, Channels.make)

Fibers.make () => ui.run(events, app)

red = '0xff0000ff'.as\n
blue = '0x0000ffff'.as\n
green = '0x00ff00ff'.as\n

model = { pos: { x: 200 y: 200 } }

handle\keydown: .defcase {
  h: (ev model) => model.put_via(model.pos.x - 10, pos: x:)
  j: (ev model) => model.put_via(model.pos.y + 10, pos: y:)
  k: (ev model) => model.put_via(model.pos.y - 10, pos: y:)
  l: (ev model) => model.put_via(model.pos.x + 10, pos: x:)

  Messages.t
  (ev model) => do
    'Unhandled key: $\n'.printf(self)
    model
  end
}

handle\keyup: .defcase {
  Messages.t
  (ev model) => model
}

handle\key: .defcase {
  true: (msg ev model) => msg.handle\keydown(ev model)
  false: (msg ev model) => msg.handle\keyup(ev model)
}

handle\type: .defcase {
  tick:  (ev model) => model
  mouse: (ev model) => model
  key:   (ev model) => do
    keymsg = ev.at 0 .unwrap .to\m
    down = ev.at 2 .unwrap
    down.handle\key(keymsg ev model)
  end
}

controller: .def (
  model?
  (type, ev*) => type.handle\type(ev, self))

header = [
  box:
  {
    radius: 0,
    border: { color: red, width: 5 },
  }
  [[text: { content: "Hello world!" size: 128 }]]
]

view: .def (
  model?
  () => [header, [rect: { x: self.pos.x, y: self.pos.y, w: 10, h: 10 color: red }]])

events.pipe(app, Streams.reduce(model controller:) |> Streams.map view:)
