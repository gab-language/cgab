position:.def(
  Strings.t
  (row col) => do
    xf = Streams.map self:
      |> Streams.split '\n'
      |> Streams.drop row
      |> Streams.take 1
      |> Streams.map join:

    (ok line) = self.collect xf .at 0

    (ok line) .cond {
      ok: () => (ok: line.slice(col))
      else: () => (none: nil:)
    }.
  end)

text = 'hello world\nthis is a test\nmore test\n'

(ok, line) =  text.position(0 1)
'$ $\n'.printf(ok line)

(ok, line) =  text.position(1 10)
'$ $\n'.printf(ok line)

(ok, line) =  text.position(2 3)
'$ $\n'.printf(ok line)

(ok, line) =  text.position(3 6)
'$ $\n'.printf(ok line)
