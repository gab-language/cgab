'Json'.use

log\row\t = 'lsp/logs'.use

diag\job\t = Shapes.make(
  server:
  uri:
  text:)

lsp\server\t = Shapes.make(
  server\in:
  server\out:
  server\open_ch:
  server\data:
  server\diagnostics:
  server\logs:)

position:.def(
  Strings.t
  (row col) => do
    xf = Streams.map self:
      |> Streams.split '\n'
      |> Streams.drop row
      |> Streams.take 1
      |> Streams.map join:

    line = self.collect xf .at 0 .unwrap

    line
  end)

# TODO: Some code for computing Position -> Byte Offset.
[lsp\server\t].defmodule {
  document\sync\full: (uri text) => do
    lines = [text.split '\n']
    self.put_via(lines server\data: uri)
  end
  document\sync\inc: (uri changes) => do
    (ok, lines) = self.server\data.at 'uri'
    lines = ok .and lines .or []

    lines = changes.reduce(lines (sofar change) => do
      str = change.at 'text' .unwrap
      range = change.at 'range' .unwrap
      (start, end) = (range.at 'start' .unwrap, range.at 'end' .unwrap)

      
    end)

    self.put_via(lines server\data: uri)
  end
}

diagnostics\queue_all:.def(
  lsp\server\t
  () => do
    server = self

    server
      .server\data
      .each (text uri) => do
        server.diagnostics\queue(text uri)
      end
  end)

diagnostics\queue:.def(
  lsp\server\t
  (text uri) => do
      self.log("Queueing Diagnostics" uri)
      self.server\diagnostics <! diag\job\t.make(self uri text)
  end)

[lsp\server\t].defmodule {
  log: data* => do
    self.info data
  end
  info: (data*) => do
    self.server\logs <! log\row\t.make(info: data)
  end
  warn: (data*) => do
    self.server\logs <! log\row\t.make(warn: data)
  end
  error: (data*) => do
    self.server\logs <! log\row\t.make(err: data)
  end
}

make:.def(
  lsp\server:
  (in out) => lsp\server\t.make(
    in .or (IO.stdin)
    out .or (IO.stdout)
    Channels.make
    {}
    Channels.make
    Channels.make))

t:.def(lsp\server: lsp\server\t)

logfile = IO
  .file("/tmp/lsprpc.log" "w")
  .unwrap

_read_header:.defcase {
  ok: (lsp m) => do
    next_header = lsp
      .server\in
      .until('\n'.to\b)
      .unwrap
      .trim '\n'

    (blank name value) = (next_header.is\blank, next_header.split ':')
    
    m = blank .and m .or(m.put(name, value))

    logfile.write(next_header + '\n')

    option:.(blank!, lsp, m)._read_header
  end
  none: (lsp m) => m
}

[lsp\server\t].defmodule {
  _read_headers: () => do
    ok:._read_header(self, [])
  end
  _read_request: () => do
    headers = self._read_headers

    self.log(headers: headers)

    len = headers
      .at "Content-Length"
      .unwrap
      .trim
      .as\n

    body = self
      .server\in
      .scan len
      .unwrap

    logfile.write(body)

    msg = body
      .as\json
      .unwrap

    msg
  end,
  # Implement the lazy-sequence protocol
  seq\init: () => do
    server = self

    self
      .server\open_ch
      .cond {
        is\open: () => (ok: nil: server._read_request)
        is\closed: () => none:
      }
      .
  end
  seq\next: () => do
    server = self

    self
      .server\open_ch
      .cond {
        is\open: () => (ok: nil: server._read_request)
        is\closed: () => none:
      }
      .
  end
  # Helpers for sending data to client
  respond: (id result) => do
    msg = { "id" id "result" result } .to\json

    content\length = msg.len

    res = Strings.make(
      'Content-Length:'content\length
      '\r\n\r\n'msg)

    self.log("Response" id res)

    self.server\out.write res .unwrap
  end
  notify: (method params) => do 
    self.log("Notification" method params?)

    msg = { "method" method "params" params } .to\json

    self.log("Notification" msg)

    content\length = msg.len

    notif = Strings.make(
      'Content-Length:'content\length
      '\r\n\r\n'msg)

    self.server\out.write notif .unwrap
  end
  # Run the server
  run: () => do
    server = self

# Service for completing and publishing diagnostics
    Fibers
      .make () => server
        .server\diagnostics
        .each diag\complete:

# Service for logging to file (/tmp/gablsp.log)
    Fibers
      .make () => server
        .server\logs
        .each log\tofile:

    self.log "Server started!"

    self.reduce(self (lsp req) => do
      msg = req .lsp\messages\into

      lsp.log("Received Msg", msg)

      (ok new_lsp) = msg .lsp\dispatch lsp

      ok .else () => do
        lsp.log("No handler found.")
      end

      (new_lsp? == lsp\server\t) .else () => do
        lsp.error("Invalid new_lsp", ok, new_lsp)
      end

      ok .then () => lsp.log("Successfully processed msg")

      ok.== ok: .and new_lsp .or lsp
    end)

    self.log "Server shutdown!"
  end,
}

lsp\server:
