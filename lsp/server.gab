'data.json' .use

log = 'lsp/logs'.use

io = 'os.io'.use

diag\job\t = Shapes.make(server: uri: text:)
lsp\server\t = Shapes.make(server\in: server\out: server\open_ch: server\data:)

make:.def(
  lsp\server:
  (in out) => lsp\server\t.make(
    in .or (io.stdin)
    out .or (io.stdout)
    Channels.make
    {}))

t:.def(lsp\server: lsp\server\t)

logfile = io
  .file("/tmp/lsprpc.log" "w")
  .unwrap

_read_header:.defcase {
  ok: (lsp m) => do
    next_header = lsp
      .server\in
      .until('\n'.to\b)
      .unwrap
      .trim '\n'

    (blank name value) = (next_header.blank, next_header.split ':')
    
    m = blank .and m .or(m.put(name, value))

    logfile.write(next_header + '\n')

    option:.(blank!, lsp, m)._read_header
  end
  none: (lsp m) => m
}

[lsp\server\t].defmodule {
  _read_headers: () => do
    ok:._read_header(self, [])
  end
  _read_request: () => do
    headers = self._read_headers

    log.(headers: headers)

    len = headers
      .at "Content-Length"
      .unwrap!
      .trim
      .as\n

    body = self
      .server\in
      .scan len
      .unwrap!

    logfile.write(body)

    msg = body
      .as\json
      .unwrap!

    msg
  end,
  # Implement the lazy-sequence protocol
  seq\init: () => do
    msg = self._read_request
    option:.(self.server\open_ch.open?, nil: msg)
  end
  seq\next: () => do
    msg = self._read_request
    option:.(self.server\open_ch.open?, nil: msg)
  end
  # Helpers for sending data to client
  respond: (id result) => do
    msg = { "id" id "result" result } .to\json

    content\length = msg.len

    res = Strings.make(
      'Content-Length:'content\length
      '\r\n\r\n'msg)

    log.("Response" id result?)

    self.server\out.write res
  end
  notify: (method params) => do 
    log.("Notification" method params?)

    msg = { "method" method "params" params } .to\json

    log.("Notification" msg)

    content\length = msg.len

    notif = Strings.make(
      'Content-Length:'content\length
      '\r\n\r\n'msg)

    self.server\out.write notif
  end
  # Run the server
  run: () => do
    log."Server started!"

    self.reduce(self (lsp req) => do
      msg = req .lsp\messages\into

      log.("Received Msg", msg)

      (ok new_lsp) = msg .lsp\dispatch lsp

      ok .else () => do
        log.("No handler found.")
      end

      (new_lsp ? == lsp\server\t) .else () => do
        log.error("Invalid new_lsp", ok, new_lsp)
      end

      ok .then () => log.("Successfully processed msg")

      (ok, new_lsp) .unwrap.or lsp
    end)
  end,
}

lsp\server:
