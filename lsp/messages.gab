log = 'lsp/logs'.use
'lsp/diagnostics'.use

lsp\messages\into:.def(
  Records.t
  () => do
    (ok, method) = self.at 'method'

    ok .else () => do
      log.error("No Method", self)
    end

    (ok, params) = self.at 'params'

    method = method.or "" .to\m
    params = params.or {}
    (ok, id) = self .at 'id'

    id = ok.== ok: .and id .or 1

    {
      method nil:,
      id: id,
      params: params,
    }
  end)

def\lsp\handler:.def(
  Strings.t
  handler => do
    lsp\handle:.def(Shapes.make(self.to\m, id:, params:), handler)
  end)

# Dispatch a message into its handler, if we have one
lsp\dispatch:.def(
  server => do
    message = self

    lsp\handle:.at message .then () => do
        log.("Dispatch" lsp\handle:.at message)
        (ok: message.lsp\handle server)
    end
  end)


#
# INITIALIZATION
#

TEXTDOCUMENTSYNCKIND\FULL = 1

'initialize' .def\lsp\handler server => do
  server.respond(
    self.id,
    {
        "capabilities" {
          "textDocumentSync" {
            "openClose" true:,
            "change" TEXTDOCUMENTSYNCKIND\FULL,
          },
        },
        "serverInfo" {
          "name" "gablsp",
          "version" "0.0.1",
        },
      })

  server
end

'initialized' .def\lsp\handler server => do
  server
end

'shutdown' .def\lsp\handler server => do
  log.("Shutting down")

  server.server\open_ch.close

  server
end

#
# SYNCHRONIZATION
#

"textDocument/didOpen" .def\lsp\handler server => do
  uri = self.params.at 'textDocument' .unwrap.at 'uri' .unwrap
  text= self.params.at 'textDocument' .unwrap.at 'text' .unwrap

  log.("Opened", uri)

  data = server.server\data.put(uri, text)

  server = server.put(server\data: data)

  server.diagnostics\queue(text, uri)

  server
end

"textDocument/didSave" .def\lsp\handler server => do
  uri = self.params.at 'textDocument' .unwrap.at 'uri' .unwrap
  (ok, text) = self.params.at 'text'

  log.("Saved", uri)

  data = server.server\data.put(uri, text)

  updated_server = server.put(server\data: data)

  updated_server.diagnostics\queue(text uri)

  (ok, updated_server) .unwrap.or (server)
end

"textDocument/didClose" .def\lsp\handler server => do
  # TODO: Delete documents from the server data on load
  server
end

"textDocument/didChange" .def\lsp\handler server => do
  uri = self.params.at 'textDocument' .unwrap.at 'uri' .unwrap
  (ok, changes) = self.params.at 'contentChanges'

  log.("Changed", uri)
  text = changes.at 0 .unwrap .at "text" .unwrap

  data = server.server\data.put(uri, text)

  updated_server = server.put(server\data: data)

  updated_server.diagnostics\queue(text uri)

  (ok, updated_server) .unwrap.or (server)

  # TODO: Handle incremental changes in documents
  updated_server
end


#
# DIAGNOSTICS
#
