int\between: .def (
  gab\number:,
  (floor, ceil) => self.float\between(floor, ceil).floor)

truthy_values = []
falsey_values = [nil:, false:, none:, err:]

self: .def _ => self
first: .def x => x
second: .def (_, x) => x
all: .def (xs*) => xs

is: .def other => self? == other

truthy_values .defmodule {
  and: (alt*) => alt*
  then: f => f . self
  or: _ => self
  else: _ => self
  assert: _ => self
}

falsey_values .defmodule {
  and: _ => self
  then: _ => self
  or: (alt*) => alt*
  else: f => f.(self)
  assert: msg => 'Assertion ($) failed: $'.panicf(self, msg .or "")
  to\option: none:,
  to\result: err:,
}

[] .defmodule {
  to\option: (args*) => (ok:, self, args*)
  to\result: (args*) => (ok:, self, args*)
}

cond\check: .defcase {
  Blocks.t,   (args*) => self.(args*)
  Messages.t, (args*) => self.(args*)
  else: ok:
}

docond: .def (fs*) => do
  args = self
  fs.reduce(
    nil:
    (acc, f) => acc.else () => f.cond\check(args*).and f)
end

cond: .def (vs*, branches) => do
  args = [self, vs*]

  k = args.docond(branches.?.*)

  branches .at k
end

put_by: .def (
  Records.t
  (k, f) => do
    v = self.at k .unwrap

    self.put(k, f.(v))
  end)

:.def(
  option:
  (cond, data*) => do
    (cond.to\option, data*)
  end)

:.def(
  result:
  (cond, data*) => (cond.to\result, data*))

[ok:] .defmodule {
  ok: (args*) => (true:, args*)
  unwrap: (args*) => args*
}

[] .defmodule {
  ok: false:
  unwrap: args* => 'Failed to unwrap $ $'.panicf(self args)
}

doreduce: .defcase {
  ## The sequence continues
  ok: (seq\i, seq\v, acc, r, xs) => do
    # Apply the reducer
    (cmd, r, acc) = r.reduce\step(acc, xs*)
    # proceed to the next sep
    cmd.doreduce(seq\i, seq\v, acc, r)
  end
  ## The sequence is done
  none: (seq\i, seq\v, acc, r) => do
    r.reduce\done(acc)
  end
  ## The reducer continues
  next: (seq\i, seq\v, acc, r) => do
    # Apply the producer resolving new values for the next step
    (ok, seq\v, xs*) = seq\i .seq\next seq\v
    # Tailcall to the next step
    ok.doreduce(seq\i, seq\v, acc, r, xs)
  end
  ## The reducer is done
  stop: (seq\i, seq\v, acc, r) => do
    r.reduce\done(acc)
  end
}

def\seq: .def do
  _ => [self] .defmodule {
    reduce: (acc, r) => do
      (ok, seq\v, xs*) = self.seq\init
      ok.doreduce(self, seq\v, acc, r, xs)
    end,
    transduce: (acc, r, td) => do
      self.reduce(acc, td .td\apply r)
    end,
    each: f => do
      self.transduce(nil:, all:, td:.tap f)
    end,
    map: f => do
      self.collect(td:.map f)
    end,
    filter: f => do
      self.collect(td:.filter f)
    end,
    skip: f => do
      self.collect(td:.skip f)
    end,
    every: f => do
      xf = td:.drop_while f
        |> td:.take 1

      self.collect xf .is\empty
    end,
    any: f => do
      xf = td:.filter f
        |> td:.take 1

      self.collect xf .is\empty.!
    end,
    join: xf => do
      self.transduce("", +:, xf)
    end,
    collect: xf => do
      self.transduce({}, cons:, xf)
    end,
    pipe: (ch, xf) =>do
      self.transduce(ch, <!:, xf)
    end
  }
end

# Channel's implementation of the seq protocol.
# It isn't totally true to the requirements - 
# The keys aren't a pure function, because channels
# Forget about their values as soon as they're taken
[Channels.t] .defmodule {
  seq\init: _ => do
    (ok, v) = self >!
    (ok, v, v)
  end
  seq\next: _ => do
    (ok, v) = self >!
    (ok, v, v)
  end
  is\open: _ => self.is\closed.!
}

Channels.t.def\seq

# Implement the reducer protocol for blocks and messages
[Blocks.t, Messages.t] .defmodule {
  reduce\step: (acc, xs*) => do
    (next:, self, self.(acc, xs*))
  end
  reduce\done: acc => acc
}

cons: .def (nil:, o => [o])

[Records.t] .defmodule {
  has: key => do
    self.at key .ok
  end
}

Records.t.def\seq

Strings.t.def\seq

is_n: .def false:
is_n: .def (Numbers.t, true:)

to\n: .def (falsey_values, 0)
to\n: .def (truthy_values, 1)

[Numbers.t] .defmodule {
  ->: to => (to, self) .to\range
  ++: _ => self + 1
  --: _ => self - 1
  even: _ => self .% 2 .== 0
  odd: _ => self .is\even .!
  pos: _ => self > 0
  neg: _ => self < 0
  to\n: _ => self
}
